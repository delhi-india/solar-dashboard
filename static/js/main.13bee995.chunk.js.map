{"version":3,"sources":["panel/MenuPanel.js","services/data/DataService.js","panel/MinorPanel.js","charts/LineChart.js","charts/ScatterPlot.js","charts/MatrixPlot.js","map/StationMap.js","utils/HeadingWithTooltip.js","panel/MajorPanel.js","App.js","serviceWorker.js","index.js","panel/cube.svg","panel/github.svg","panel/twitter.svg"],"names":["Header","className","src","Cube","alt","Switch","checked","this","props","switchChecked","onChange","switchHandler","bind","value","color","size","inputProps","Component","DataService","capacitySum","capacityMap","station_static","forEach","v","capMap","capSum","toFixed","Promise","resolve","reject","fetch","then","res","json","MinorPanel","chartRef","React","createRef","prChartRef","cufChartRef","staticState","stationDetails","fetchStatic","ref","Chart","type","data","labels","datasets","label","backgroundColor","options","scales","xAxes","stacked","yAxes","cRef","current","getContext","stationSummaryChart","Button","variant","block","id","Row","Col","aggPowerOutput","aggEnergyOutput","md","LineChart","chart","styleMap","yAxisID","borderColor","position","x","update","idx","ds","undefined","d","push","NaN","fill","pointRadius","myChartRef","prepareData","spanGaps","title","display","name","text","toUpperCase","legend","ticks","gridLines","tooltips","mode","axis","intersect","ScatterPlot","pointBackgroundColor","pointBorderWidth","pointHoverRadius","scaleLabel","labelString","callbacks","i","datasetIndex","index","MatrixPlot","daysConfig","days","j","y","self","ctx","dataset","dataIndex","Color","rgbString","alpha","width","height","a","chartArea","bottom","top","maintainAspectRatio","callback","values","Date","setDate","getDate","getMonth","getFullYear","suggestedMin","suggestedMax","tickMarkLength","matrix","extractData","l","length","empty","_id","getDay","powerGeneratedTodayMaxSum","StationMap","center","Map","zoom","TileLayer","attribution","url","FeatureGroup","fillColor","fillOpacity","stroke","Circle","radius","HeadingWithTooltip","content","Tooltip","Fragment","Typography","tooltip_title","tooltip_content","IconButton","aria-label","MajorPanel","state","energyProducedData","noStations","stationStatic","fetchHistory","setState","history","plantEnergyPowerMap","plotPowerData","plotEnergyData","Object","keys","key","rows","cols","stationData","val","prepareStationLineChartData","scatterData","prepareScatterPlotData","href","github","twitter","Tabs","defaultActiveKey","style","flex","justifyContent","flexDirection","Tab","eventKey","tabClassName","Container","aggData","powerOutput","irradiationOutput","energyOutout","renderCom","switchState","renderGraphs","App","duration","handleSwitch","console","log","dataArr","extract","extractEnergyAgg","stIdx","tempPower","Array","tempEnergy","tempIrr","getHours","station_data","energyGen","hr","mostRecentDataDate","setMinutes","getMinutes","aggAllPlantData","stringDateUpdatedAt","dataUpdatedAt","cp","en","po","getTime","eo","arr","parseInt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.13bee995.chunk.js","sourcesContent":["import React ,{ Component } from 'react';\nimport Switch from '@material-ui/core/Switch';\n\nimport './MenuPanel.css';\nimport Cube from './cube.svg'\n\nclass Header extends Component {\n\n    /* handler(val) {\n        this.props.switchHandler(val)\n    } */\n    \n    render() {\n        return(\n            <div className=\"menu-container\">\n            <img src={Cube} alt=\"\"/>\n            Map\n            <Switch\n                checked={this.props.switchChecked}\n                onChange={this.props.switchHandler.bind(this)}\n                value=\"checkedA\"\n                color=\"primary\"\n                size=\"small\"\n                inputProps={{ 'aria-label': 'secondary checkbox' }}\n            />\n            </div>\n        )\n    }\n}\n\nexport default Header","import station_static from './station_static.json'\n\nclass DataService {\n    static fetchStatic() {\n        let capacitySum = 0\n        let capacityMap = {}\n        station_static['data'].forEach((v) => {\n            capacityMap[v['_id']] = v['info']['powerCapacity'] || 0\n            capacitySum += v['info']['powerCapacity'] || 0\n        })\n        let info = {\n            capMap: capacityMap,\n            capSum: capacitySum.toFixed(2)\n        }\n        return info\n    }\n\n    static fetchHistory() {\n\t\treturn new Promise((resolve, reject) => {\n            fetch('http://localhost:5000/history')\n                .then((res) => {\n                    res.json().then((res) => {\n                        resolve(res)\n                    })\n                })\n        })\n\t}\n}\n\nexport default DataService","import React ,{ Component } from 'react';\nimport { Row, Col, Button } from 'react-bootstrap'\nimport Chart from 'chart.js'\nimport './MinorPanel.css';\n\nimport DataService from '../services/data/DataService'\n\nclass MinorPanel extends Component {\n    chartRef = React.createRef()\n    prChartRef = React.createRef()\n    cufChartRef = React.createRef()\n\n    staticState = {\n        stationDetails: DataService.fetchStatic()\n    }\n\n    stationSummaryChart(ref) {\n        new Chart(ref, {\n            type: 'horizontalBar',\n            data: {\n                labels: [\"\"],\n                datasets: [\n                    {\n                        label: '# of dead stations',\n                        data: [8],\n                        backgroundColor: \"#BCBCBC\"\n                    },\n                    {\n                        label: '# of online stations',\n                        data: [15],\n                        backgroundColor: \"#507AFF\"\n                    },\n                    {\n                        label: \"# of disconnected stations\",\n                        data: [12],\n                        backgroundColor: \"#BBCEFF\"\n                    }\n                ]\n            },\n            options: {\n                scales: {\n                    xAxes: [{\n                        stacked: true\n                    }],\n                    yAxes: [{\n                        stacked: true\n                    }]\n                }\n            }\n        });\n    }\n\n    prChart(ref, data) {\n        new Chart(ref, {\n            type: \"doughnut\",\n            data: {\n                datasets: [{\n                    data: data,\n                    backgroundColor: [\n                        '#BCBCBC',\n                        '#507AFF'\n                    ]\n                }]\n            }\n        })\n    }\n\n    componentDidMount() {\n        const cRef = this.chartRef.current.getContext(\"2d\")\n        this.stationSummaryChart(cRef)\n\n        /* const prRef = this.prChartRef.current.getContext(\"2d\")\n        this.prChart(prRef, [10.9, 89.1]) */\n\n        /* const cufRef = this.cufChartRef.current.getContext(\"2d\")\n        this.prChart(cufRef, [100-16.1, 16.1]) */\n    }\n\n    render() {\n        return(\n            <div className=\"panel-container\">\n                <h2>Delhi Solar Power Station Dashboard</h2>\n                <Button variant=\"outline-dark\" block>Learn More</Button>\n                <div className=\"time-container\">\n                    <h3>TODAY</h3>\n                    <div className=\"info-box\">\n                        <canvas id=\"ch\" ref={this.chartRef}/>\n                    </div>\n                    <div className=\"info-box\">\n                        <Row>\n                            <Col>\n                                <span className=\"ele-name\">Power Output</span>\n                                <span className=\"ele-value\">{this.props.aggPowerOutput}</span>\n                                <span className=\"ele-unit\">kW</span>\n                            </Col>\n                            <Col>\n                                <span className=\"ele-name\">Energy Generated Today</span>\n                                <span className=\"ele-value\">{this.props.aggEnergyOutput}</span>\n                                <span className=\"ele-unit\">kWh</span>\n                            </Col>\n                        </Row>\n                    </div>\n                    <div className=\"info-box\">\n                        <Row>\n                            {/* <Col md={4}>\n                                <span className=\"ele-name\">Performance Ratio</span>\n                                <span className=\"ele-value\">89.9</span>\n                                <span className=\"ele-unit\">%</span>\n                                <canvas id=\"pr\" ref={this.prChartRef}></canvas>\n                                \n                            </Col> */}\n                            <Col md={6}>\n                                <span className=\"ele-name\">Specific Yield</span>\n                                <span className=\"ele-value\">{(this.props.aggEnergyOutput/this.staticState.stationDetails.capSum).toFixed(2)}</span>\n                                <span className=\"ele-unit\">kWh/kWp</span>\n                            </Col>\n                            <Col md={6}>\n                                <span className=\"ele-name\">Capacity Utilisation Factor</span>\n                                <span className=\"ele-value\">{(this.props.aggEnergyOutput / (24 * this.staticState.stationDetails.capSum) * 100).toFixed(2)}</span>\n                                <span className=\"ele-unit\">%</span>\n                                {/* <canvas id=\"cuf\" ref={this.cufChartRef}></canvas> */}\n                            </Col>\n                        </Row>\n                    </div>\n                </div>\n\n\n                {/* <div className=\"time-container\">\n                    <h3>TODAY</h3>\n                    <div className=\"info-box\">\n                    hello\n                    </div>\n                    <div className=\"info-box\">\n                        <Row>\n                            <Col>\n                                <span className=\"ele-name\">Power Output</span>\n                                <span className=\"ele-value\">124.33</span>\n                                <span className=\"ele-unit\">mW</span>\n                            </Col>\n                            <Col>\n                                <span className=\"ele-name\">Energy Generated Today</span>\n                                <span className=\"ele-value\">635.34</span>\n                                <span className=\"ele-unit\">mWh</span>\n                            </Col>\n                        </Row>\n                    </div>\n                    <div className=\"info-box\">\n                        <Row>\n                            <Col>\n                                <span className=\"ele-name\">Performance Ratio</span>\n                                <span className=\"ele-value\">89.9</span>\n                                <span className=\"ele-unit\">%</span>\n                            </Col>\n                            <Col>\n                                <span className=\"ele-name\">Specific Yield</span>\n                                <span className=\"ele-value\">3.25</span>\n                                <span className=\"ele-unit\">kWh/kWp</span>\n                            </Col>\n                            <Col>\n                                <span className=\"ele-name\">Capacity Utilisation Factor</span>\n                                <span className=\"ele-value\">16.1</span>\n                                <span className=\"ele-unit\">%</span>\n                            </Col>\n                        </Row>\n                    </div>\n                </div> */}\n            </div>\n        )\n    }\n}\n\nexport default MinorPanel","import React ,{ Component } from 'react';\nimport Chart from 'chart.js'\n\nimport './LineChart.css'\n\nclass LineChart extends Component {\n    chartRef = React.createRef()\n    staticState = {\n        chart: null\n    }\n    styleMap = [\n        {\n            yAxisID: 'A',\n            borderColor: \"#C6C6C6\",\n            backgroundColor: \"#C6C6C666\",\n            position: \"right\"\n        },\n        {\n            yAxisID: 'B',\n            borderColor: \"#507AFF00\",\n            backgroundColor: \"#507AFF\",\n            position: \"left\"\n        }\n    ]\n\n    /* componentDidUpdate() {\n        //console.log('linechart')\n        //console.log(this.props.data)\n        //this.extractUpdatedData()\n        //console.log(this.props.label)\n        //console.log('update')\n    } */\n\n    extractUpdatedData() {\n        if(this.props.data) {\n            let data = this.props.data\n\n            this.staticState.chart.data.labels = data.x\n            this.staticState.chart.data.datasets.data = this.props.label\n\n            this.staticState.chart.update()\n\n            /* let l = data.length\n            let empty = 6 - new Date(data[l-1]._id).getDay()\n            let i = 0\n            for(; i<empty; i++) {\n                this.staticState.data[i]['v'] = 0\n            }\n            for(let j=0; j<l; j++) {\n                this.staticState.data[i+j]['v'] = data[l-j-1].powerGeneratedTodayMaxSum\n            } */\n            \n        }\n    }\n\n    prepareData(data) {\n        let datasets = []\n        let yAxes = []\n\n        data.forEach((v, idx) => {\n            let ds = []\n            if(v === undefined) {\n                return\n            }\n            v.forEach((d) => {\n                if(d === 0) {\n                    ds.push(NaN)\n                }\n                else {\n                    ds.push(d.toFixed(2))\n                }\n            })\n            datasets.push({\n                yAxisID: this.styleMap[idx].yAxisID,\n                data: ds,\n                borderColor: this.styleMap[idx].borderColor,\n                fill: 'start',\n                backgroundColor: this.styleMap[idx].backgroundColor,\n                pointRadius: 0\n            })\n            yAxes.push({\n                id: this.styleMap[idx].yAxisID,\n                type: 'linear',\n                position: this.styleMap[idx].position,\n            })\n        })\n\n        return { datasets, yAxes }\n    }\n\n\tcomponentDidUpdate() {\n\t\tconst myChartRef = this.chartRef.current.getContext(\"2d\");\n\n        let { datasets, yAxes } = this.prepareData(this.props.data)\n        \n        this.staticState.chart = new Chart(myChartRef, {\n            type: \"line\",\n            data: {\n                //Bring in data\n                labels: this.props.label,\n                datasets: datasets\n            },\n            options: {\n                spanGaps: true,\n                title: {\n                    display: this.props.name === undefined ? false : true,\n                    text: this.props.name === undefined ? \"\" : this.props.name.toUpperCase()\n                },\n                legend: {\n                    display: false\n                },\n                scales: {\n                    xAxes: [{\n                        ticks: {\n                            display: false\n                        },\n                        gridLines: {\n                            display: false\n                        }\n                    }],\n                    yAxes: yAxes\n                },\n                tooltips: {\n                    mode: 'index',\n                    axis: 'x',\n                    intersect: false\n                }\n            }\n        });\n\t}\n\n\trender() {\n        //console.log('line')\n\t\treturn(\n\t\t\t<div className=\"chart-box\">\n\t\t\t\t<canvas id=\"chart\" ref={this.chartRef}></canvas>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default LineChart","import React ,{ Component } from 'react';\nimport Chart from 'chart.js'\n\n//import './ScatterPlot.css'\n\nclass ScatterPlot extends Component {\n    chartRef = React.createRef()\n    staticState = {\n        chart: null\n    }\n\n    /* styleMap = [\n        {\n            yAxisID: 'A',\n            borderColor: \"#C6C6C6\",\n            backgroundColor: \"#C6C6C666\",\n            position: \"left\"\n        },\n        {\n            yAxisID: 'B',\n            borderColor: \"#507AFF00\",\n            backgroundColor: \"#507AFF\",\n            position: \"right\"\n        }\n    ]\n\n    prepareData(data) {\n        let datasets = []\n        let yAxes = []\n\n        data.forEach((v, idx) => {\n            let ds = []\n            v.forEach((d) => {\n                if(d === 0) {\n                    ds.push(NaN)\n                }\n                else {\n                    ds.push(d.toFixed(2))\n                }\n            })\n            datasets.push({\n                yAxisID: this.styleMap[idx].yAxisID,\n                data: ds,\n                borderColor: this.styleMap[idx].borderColor,\n                fill: 'start',\n                backgroundColor: this.styleMap[idx].backgroundColor,\n                pointRadius: 0\n            })\n            yAxes.push({\n                id: this.styleMap[idx].yAxisID,\n                type: 'linear',\n                position: this.styleMap[idx].position,\n            })\n        })\n\n        return { datasets, yAxes }\n    } */\n\n\tcomponentDidMount() {\n\t\tconst myChartRef = this.chartRef.current.getContext(\"2d\");\n\n        //let { datasets, yAxes } = this.prepareData(this.props.data)\n\n        let d = []\n        /* for(let i=0; i<20; i++) {\n            d.push({\n                x: Math.random() * 10 + 1,\n                y: Math.random() * 10 + 1,\n                name: 'name'\n            })\n        } */\n\n        if(this.props.data) {\n            d = this.props.data\n        }\n        \n        this.staticState.chart = new Chart(myChartRef, {\n            type: \"scatter\",\n            data: {\n                datasets: [{\n                    label: 'Scatter Dataset',\n                    data: d,\n                    pointBackgroundColor: \"#507AFF\",\n                    pointBorderWidth: 0,\n                    pointRadius: 5,\n                    pointHoverRadius: 8\n                }]\n            },\n            options: {\n                legend: {\n                    display:false\n                },\n                scales: {\n                    xAxes: [{\n                        scaleLabel: {\n                            labelString: 'Power Plant Capacity',\n                            display: true\n                        }\n                    }],\n                    yAxes: [{\n                        scaleLabel: {\n                            labelString: 'Power Plant Energy Output (Today)',\n                            display: true\n                        }\n                    }]\n                },\n                tooltips: {\n                    callbacks: {\n                        label: function(i, d) {\n                            return d.datasets[i.datasetIndex].data[i.index].name\n                        }\n                    }\n                }\n            }\n        });\n\t}\n\n    componentDidUpdate() {\n        this.staticState.chart.data.datasets[0].data = this.props.data\n        this.staticState.chart.update()\n    }\n\n\trender() {\n\t\treturn(\n\t\t\t<canvas id=\"matrix\" ref={this.chartRef}></canvas>\n\t\t)\n\t}\n}\n\nexport default ScatterPlot","import React ,{ Component } from 'react';\nimport Chart from 'chart.js'\nimport 'chartjs-chart-matrix'\nimport Color from 'chartjs-color'\n\n//import './MatrixPlot.css'\n\nclass MatrixPlot extends Component {\n    chartRef = React.createRef()\n    daysConfig = 40\n    staticState = {\n        chart: null,\n        data: []\n    }\n    \n    days = [\"\", \"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thurs\", \"Fri\", \"Sat\", \"\"]\n\n    constructor(props) {\n        super(props)\n        // console.log('const')\n        // console.log(props.data)\n        // console.log(this.staticState.data)\n        for(let i=this.daysConfig; i >= 1; i--) {\n            for(let j=1; j <= 7; j++) {\n                this.staticState.data.push({\n                    x: i,\n                    y: j,\n                    v: 0\n                })\n            }\n        }\n        \n    }\n\n    matrix() {\n        let self = this\n        \n\n        const ref = this.chartRef.current.getContext(\"2d\")\n        this.staticState.chart = new Chart(ref, {\n            type: 'matrix',\n            data: {\n                datasets: [{\n                    data: this.staticState.data,\n                    backgroundColor: function(ctx) {\n                        var value = ctx.dataset.data[ctx.dataIndex].v;\n                        if(value === 0) {\n                            return Color(\"#cccccc44\").rgbString()\n                        }\n                        var alpha = value / 10000\n                        return Color('#507AFF').alpha(alpha).rgbString();\n                    },\n                    width: function(ctx) {\n                        //var a = ctx.chart.chartArea;\n                        return 20;\n                    },\n                    height: function(ctx) {\n                        var a = ctx.chart.chartArea;\n                        return (a.bottom - a.top)/8.1;\n                    }\n                }]\n            },\n            options: {\n                legend: {\n                    display: false\n                },\n                maintainAspectRatio: false,\n                tooltips: {\n                    callbacks: {\n                        label: function(i, d) {\n                            return 'Value: ' + d.datasets[i.datasetIndex].data[i.index].v.toFixed(2) + ' kWh'\n                        }\n                    }\n                },\n                scales: {\n                    xAxes: [{\n                        ticks: {\n                            callback: function(value, index, values) {\n                                let d = new Date()\n                                d.setDate(new Date().getDate() - self.daysConfig + value)\n                                return d.getDate() + '/' + (d.getMonth()+1) + '/' + d.getFullYear()\n                            }\n                        },\n                        gridLines: {\n                            display: false\n                        }\n                    }],\n                    yAxes: [{\n                        ticks: {\n                            callback: function(value, index, values) {\n                                return self.days[8-value]\n                            },\n                            suggestedMin: 0,\n                            suggestedMax: 8,\n                        },\n                        gridLines: {\n                            display: false,\n                            tickMarkLength: 5\n                        }\n                    }]\n                }\n            }\n        });\n    }\n\n\tcomponentDidMount() {\n\t\tthis.matrix()\n        this.extractData()\n\t}\n\n    componentDidUpdate() {\n        // console.log('matrix')\n        // console.log(this.props.data)\n        this.extractData()\n    }\n\n    extractData() {\n        if(this.props.data) {\n            let data = this.props.data\n            let l = data.length\n            let empty = 6 - new Date(data[l-1]._id).getDay()\n            let i = 0\n            for(; i<empty; i++) {\n                this.staticState.data[i]['v'] = 0\n            }\n            for(let j=0; j<l; j++) {\n                this.staticState.data[i+j]['v'] = data[l-j-1].powerGeneratedTodayMaxSum\n            }\n            this.staticState.chart.update()\n        }\n    }\n\n\trender() {\n\t\treturn(\n\t\t\t<canvas id=\"scatter-plot\" ref={this.chartRef}></canvas>\n\t\t)\n\t}\n}\n\nexport default MatrixPlot","import React ,{ Component } from 'react';\nimport 'leaflet/dist/leaflet.css'\nimport { Circle, Map, TileLayer, FeatureGroup } from 'react-leaflet'\n\nimport './StationMap.css';\n\nclass StationMap extends Component {\n    center = [28.6126463,77.2314619]\n    render() {\n        return (\n            <Map center={this.center} zoom={12}>\n                <TileLayer\n                    attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                    url=\"https://api.mapbox.com/styles/v1/upperwal/ck06t68u40ckc1do50ods3tqe/tiles/{z}/{x}/{y}?access_token=pk.eyJ1IjoidXBwZXJ3YWwiLCJhIjoiY2lxNmVvcGo4MDA3MGZ2bTY1b255OW14dSJ9.h18VG_xCO7yQXMajIqKyHg\"\n                    />\n                <FeatureGroup fillColor=\"#507AFF\" fillOpacity={0.8} stroke={false}>\n                    <Circle center={[28.6126463,77.2314619]} radius={1000}/>\n                    <Circle center={[28.6106793,77.1966676]} radius={650}/>\n                    <Circle center={[28.6532077,77.3330656]} radius={243}/>\n                    <Circle center={[28.5764754,77.3555968]} radius={548}/>\n                    <Circle center={[28.781172,77.1177814]} radius={428}/>\n                    <Circle center={[28.8003859,77.3262338]} radius={1100}/>\n                    <Circle center={[28.4763612,77.2249974]} radius={854}/>\n                </FeatureGroup>\n            </Map>\n        )\n    }\n}\n\nexport default StationMap","import React ,{ Component } from 'react';\n\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Typography from '@material-ui/core/Typography';\nimport InfoIcon from '@material-ui/icons/Info';\n\nimport './HeadingWithTooltip.css';\n\nclass HeadingWithTooltip extends Component {\n    render() {\n        return(\n            <h5 className=\"HeadingWithTooltip-h5\">\n                {this.props.content} \n                <Tooltip title={\n                    <React.Fragment>\n                        <Typography color=\"inherit\">{this.props.tooltip_title}</Typography>\n                <p className=\"tooltip-html-p\">{this.props.tooltip_content}</p>\n                    </React.Fragment>\n                }>\n                    <IconButton aria-label=\"delete\">\n                        <InfoIcon />\n                    </IconButton>\n                </Tooltip>\n            </h5>\n        )\n    }\n}\n\nexport default HeadingWithTooltip","import React ,{ Component } from 'react';\nimport { Tabs, Tab, Row, Col, Container } from 'react-bootstrap'\nimport './MajorPanel.css';\n\nimport github from './github.svg'\nimport twitter from './twitter.svg'\n\nimport LineChart from '../charts/LineChart'\nimport ScatterPlot from '../charts/ScatterPlot'\nimport MatrixPlot from '../charts/MatrixPlot'\nimport StationMap from '../map/StationMap'\nimport HeadingWithTooltip from '../utils/HeadingWithTooltip'\n\nimport DataService from '../services/data/DataService'\n\nclass MajorPanel extends Component {\n    state = {\n        energyProducedData: null\n    }\n    staticState = {\n        noStations: 0,\n        stationStatic: {}\n    }\n\n    history() {\n        DataService.fetchHistory().then((res) => {\n            this.setState({\n                energyProducedData: res.data\n            })\n        })\n\t}\n\n    componentDidMount() {\n        this.history()\n        this.staticState.stationStatic = DataService.fetchStatic()\n    }\n\n    componentDidUpdate() {\n        //console.log(this.state.energyProducedData)\n    }\n\n    prepareScatterPlotData() {\n        let data = this.props.plantEnergyPowerMap\n        let plotPowerData = []\n        let plotEnergyData = []\n        Object.keys(data).forEach((key) => {\n            plotPowerData.push({\n                x: this.staticState.stationStatic.capMap[key],\n                y: data[key]['currentPowerOutput'],\n                name: 'Name: ' + (data[key]['name'].toUpperCase()) + ' [Cap: ' + this.staticState.stationStatic.capMap[key] + ' kWp / Power Output: ' + (data[key]['currentPowerOutput'].toFixed(2)) + ' kW]'\n            })\n            plotEnergyData.push({\n                x: this.staticState.stationStatic.capMap[key],\n                y: data[key]['powerGeneratedToday'],\n                name: 'Name: ' + (data[key]['name'].toUpperCase()) + ' [Cap: ' + this.staticState.stationStatic.capMap[key] + ' kWp / Energy Output: ' + (data[key]['powerGeneratedToday'].toFixed(2)) + ' kWh]'\n            })\n        })\n        this.staticState.noStations = Object.keys(data).length\n        return [plotPowerData, plotEnergyData]\n    }\n\n    prepareStationLineChartData() {\n        let rows = [], cols = []\n        let stationData = this.props.stationData\n\t\tObject.keys(stationData).forEach((key, idx) => {\n            let val = stationData[key]\n\t\t\tcols.push(\n\t\t\t\t<Col key={idx}>\n\t\t\t\t\t<LineChart data={[val['irradiation']['y'], val['currentPowerOutput']['y']]} label={val['currentPowerOutput']['x']} name={val['name']}/>\n\t\t\t\t</Col>\n\t\t\t)\n\t\t\tif(((idx+1) % 3) === 0) {\n\t\t\t\trows.push(\n\t\t\t\t\t<Row key={idx} className=\"extra-margin-bottom\">\n\t\t\t\t\t\t{cols}\n\t\t\t\t\t</Row>\n\t\t\t\t)\n\t\t\t\tcols = []\n\t\t\t}\n\t\t})\n        rows.push(\n            <Row key=\"remaining\" className=\"extra-margin-bottom\">\n                {cols}\n            </Row>\n        )\n        return rows\n    }\n\n    renderGraphs() {\n        let rows = this.prepareStationLineChartData()\n        let scatterData = this.prepareScatterPlotData()\n        // console.log('scatterData')\n        // console.log(this.props.aggData.x)\n        // console.log(this.props.aggData.powerOutput)\n        return (\n            <>\n                <div className=\"header\">\n                    <a href=\"/login\"><img src={github} alt=\"github\"/></a>\n                    <a href=\"/login\"><img src={twitter} alt=\"twitter\"/></a>\n                </div>\n                <div>\n                <Tabs defaultActiveKey=\"summary\" id=\"uncontrolled-tab-example\" style={{flex:1,justifyContent:'space-around',flexDirection:'row'}}>\n                    <Tab eventKey=\"summary\" title=\"Aggregated Summary\" tabClassName={{flex:1}}>\n                        <div className=\"matrix\">\n                            <HeadingWithTooltip content={\"Daily Energy Output\"} tooltip_title={\"Help\"} tooltip_content={['This chart shows ', <u key=\"daily\">daily energy produced (kWh)</u>, ' for all power stations.']}/>\n                            <MatrixPlot data={this.state.energyProducedData}/>\n                        </div>\n                        <Container>\n                            <Row className=\"extra-margin-bottom\">\n                                <Col md={6}>\n                                    <div className=\"info-box-left-border\">\n                                        <h6>Total Capacity</h6>\n                                        <h3>{this.staticState.stationStatic.capSum}</h3>kWp\n                                    </div>\n                                </Col>\n                                <Col md={6}>\n                                    <div className=\"info-box-left-border\">\n                                        <h6># of live stations</h6>\n                                        <h3>{this.staticState.noStations}</h3>nos\n                                    </div>\n                                </Col>\n                            </Row>\n                        </Container>\n                        <Container>\n                            <Row className=\"extra-margin-bottom\">\n                                <Col md={4}>\n                                    <HeadingWithTooltip content={\"Today's Power Generation Trend (kW)\"} tooltip_title={\"Help\"} tooltip_content={'This chart shows power generated today.'}/>\n                                    <LineChart data={[this.props.aggData.powerOutput]} label={this.props.aggData.x}/>\n                                    {/* <canvas id=\"power-gen\" ref={this.powerGenRef}></canvas> */}\n                                </Col>\n                                <Col md={4}>\n                                    <HeadingWithTooltip content={\"Today's Solar Insolation Trend (kW/m^2)\"} tooltip_title={\"Help\"}/>\n                                    <LineChart data={[this.props.aggData.irradiationOutput]} label={this.props.aggData.x}/>\n                                </Col>\n                                <Col md={4}>\n                                    <HeadingWithTooltip content={\"Today's Energy Generation Trend (kWh)\"} tooltip_title={\"Help\"}/>\n                                    <LineChart data={[this.props.aggData.energyOutout]} label={this.props.aggData.x}/>\n                                </Col>\n                            </Row>\n                        </Container>\n\n                        \n                    </Tab>\n                    <Tab eventKey=\"details\" title=\"Station Details\" tabClassName={{flex:1}}>\n                        <div className=\"station-comparision-box\">\n                            <HeadingWithTooltip content={\"Today's Power Generation (kW) - Insolation Trend (kW/m^2)\"} tooltip_title={\"Help\"} tooltip_content={'This chart shows power generated today.'}/>\n                            {rows}\n                        </div>\n                    </Tab>\n                    <Tab eventKey=\"comparision\" title=\"Station Comparision\" tabClassName={{flex:1}}>\n                        <div className=\"station-comparision-box\">\n                            <HeadingWithTooltip content={\"Today's Power Output (kW) vs Plant Capacity (kWp)\"} tooltip_title={\"Help\"} tooltip_content={'This chart shows power generated today.'}/>\n                            <ScatterPlot data={scatterData[0]}/>\n                            <HeadingWithTooltip content={\"Today's Energy Output (kWh) vs Plant Capacity (kWp)\"} tooltip_title={\"Help\"} tooltip_content={'This chart shows power generated today.'}/>\n                            <ScatterPlot data={scatterData[1]}/>\n                        </div>\n                    </Tab>\n                </Tabs>\n                </div>\n            </>\n        )\n    }\n\n    render() {\n        let renderCom = null\n        if(!this.props.switchState) {\n            renderCom = this.renderGraphs()\n        } else {\n            renderCom = <StationMap/>\n        }\n        return(\n            <div className=\"major-container\">\n                {renderCom}\n            </div>\n        )\n    }\n}\n\nexport default MajorPanel","import React ,{ Component } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport MenuPanel from 'panel/MenuPanel'\nimport MinorPanel from 'panel/MinorPanel'\nimport MajorPanel from 'panel/MajorPanel'\n\nclass App extends Component {\n\n\tstate = {\n        stationData: {},\n\t\taggPowerOutput: 0,\n\t\taggEnergyOutput: 0,\n\t\tplantEnergyPowerMap: {},\n        switchChecked: false,\n        aggData: {}\n    }\n\n    duration = 14\n\n    constructor(props) {\n        super(props)\n        this.handleSwitch = this.handleSwitch.bind(this)\n    }\n\n    handleSwitch(val) {\n        this.setState({\n            switchChecked: !this.state.switchChecked\n        })\n        console.log('Val: ' + val)\n    }\n\n\tfetch() {\n\t\tfetch('http://localhost:5000')\n            .then((res) => {\n                res.json().then((res) => {\n                    this.prepareData(res.data)\n                })\n            })\n\t}\n\n\tprepareData(dataArr) {\n        let data = {}\n        dataArr.forEach((v, idx) => {\n            //console.log(v['name'])\n            data[v['_id']] = {\n                'currentPowerOutput': this.extract(v['currentPowerOutput'], 'currentPowerOutput'),\n                'irradiation': this.extract(v['irradiation'], 'irradiation'),\n                'powerGeneratedToday': this.extract(v['powerGeneratedToday'], 'powerGeneratedToday'),\n                'name': v['name']\n            }\n        })\n        this.extractEnergyAgg(data)\n    }\n\n    aggAllPlantData(aggData, stationData, stIdx) {\n        let tempPower = Array(this.duration).fill(0)\n        let tempEnergy = Array(this.duration).fill(0)\n        let tempIrr = Array(this.duration).fill(0)\n        stationData['currentPowerOutput']['x'].forEach((val, i) => {\n            if(val.getHours() >= 6 || val.getHours() < 20) {\n                //let idx = (val.getHours() - 6) * 4 + Math.floor(val.getMinutes() / 15)\n                let idx = (val.getHours() - 6)\n                tempPower[idx] = stationData['currentPowerOutput']['y'][i]\n                tempEnergy[idx] = stationData['powerGeneratedToday']['y'][i]\n                tempIrr[idx] = stationData['irradiation']['y'][i]\n            }\n            \n        })\n        for(let i=0; i<tempPower.length; i++) {\n            aggData['powerOutput'][i] += tempPower[i]\n            aggData['energyOutout'][i] += tempEnergy[i]\n            aggData['irradiationOutput'][i] = (aggData['irradiationOutput'][i] * stIdx + tempIrr[i]) / (stIdx + 1)\n        }\n    }\n\n\textractEnergyAgg(station_data) {\n        let powerOutput = 0\n        let energyGen = 0\n\t\tlet plantEnergyPowerMap = {}\n\n        let aggData = {\n            powerOutput: new Array(this.duration).fill(0),\n            energyOutout: new Array(this.duration).fill(0),\n            irradiationOutput: new Array(this.duration).fill(0),\n            x: new Array(this.duration)\n        }\n        for(let i=0;i<this.duration;i++) {\n            let hr = i + 6\n            let min = '00'\n            aggData.x[i] = '' + hr + ':' + min\n        }\n        Object.keys(station_data).forEach((key, i) => {\n            let mostRecentDataDate = new Date()\n            mostRecentDataDate.setMinutes(mostRecentDataDate.getMinutes() - 40)\n\n            this.aggAllPlantData(aggData, station_data[key], i)\n\n            let stringDateUpdatedAt = station_data[key]['currentPowerOutput']['x']\n            let dataUpdatedAt = stringDateUpdatedAt[stringDateUpdatedAt.length - 1]\n\n            let cp = station_data[key]['currentPowerOutput']['y']\n            let en = station_data[key]['powerGeneratedToday']['y']\n\n            let po = dataUpdatedAt.getTime() >= mostRecentDataDate.getTime() ? cp[cp.length-1] : 0\n            let eo = en[en.length-1]\n\n            powerOutput += po\n            energyGen += eo\n\n\t\t\tplantEnergyPowerMap[key] = {\n\t\t\t\t'currentPowerOutput': po,\n\t\t\t\t'powerGeneratedToday': eo,\n                'name': station_data[key]['name']\n\t\t\t}\n        })\n        this.setState({\n            stationData: station_data,\n            aggPowerOutput: powerOutput.toFixed(2),\n            aggEnergyOutput: energyGen.toFixed(2),\n\t\t\tplantEnergyPowerMap: plantEnergyPowerMap,\n            aggData: aggData\n        })\n    }\n\n\textract(arr, name) {\n        let x = [], y = []\n        arr.forEach((v, idx) => {\n            let d = new Date(parseInt(v['timestamp'])*1000)\n            x.push(d)\n            y.push(v[name] !== undefined ? v[name] : 0)\n        })\n        return {\n            'x': x,\n            'y': y\n        }\n    }\n\n\tcomponentDidMount() {\n\t\tthis.fetch()\n\t}\n\n\trender() {\n\n\t\treturn(\n\t\t\t<div className=\"app app-container\">\n\t\t\t\t<div className=\"app-menu\">\n\t\t\t\t\t<MenuPanel switchHandler={this.handleSwitch}/>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"app-minor\">\n\t\t\t\t\t<MinorPanel aggEnergyOutput={this.state.aggEnergyOutput} aggPowerOutput={this.state.aggPowerOutput}/>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"app-major\">\n\t\t\t\t\t<MajorPanel stationData={this.state.stationData} plantEnergyPowerMap={this.state.plantEnergyPowerMap} switchState={this.state.switchChecked} aggData={this.state.aggData}/>\n\t\t\t\t</div>\n\t\t\t\t{/* <MinorPanel />\n\t\t\t\t<MajorPanel /> */}\n\t\t\t\t{/* <div className=\"chart-container\">\n\t\t\t\t<Container fluid=\"true\">\n\t\t\t\t</Container>\n\t\t\t\t\t\n\t\t\t\t</div> */}\n\t\t\t</div>\n\t\t\t\n\t\t)\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/cube.5b333429.svg\";","module.exports = __webpack_public_path__ + \"static/media/github.48606cef.svg\";","module.exports = __webpack_public_path__ + \"static/media/twitter.70283587.svg\";"],"sourceRoot":""}